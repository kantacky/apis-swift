// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: research/gtfs_realtime/v1/gtfs_realtime.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Research_GtfsRealtime_V1_ListVehiclesPositionsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Agency ID (UUID)
  public var agencyID: String = String()

  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {self._timestamp = nil}

  public var bufferSeconds: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Research_GtfsRealtime_V1_ListVehiclesPositionsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: Kantacky_Foundation_V1_Result {
    get {return _result ?? Kantacky_Foundation_V1_Result()}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  public var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  public mutating func clearResult() {self._result = nil}

  public var vehiclePositions: [Research_GtfsRealtime_V1_VehiclePosition] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _result: Kantacky_Foundation_V1_Result? = nil
}

public struct Research_GtfsRealtime_V1_ListVehiclePositionsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Agency ID (UUID)
  public var agencyID: String = String()

  public var vehicleID: String = String()

  public var timestampFrom: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestampFrom ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestampFrom = newValue}
  }
  /// Returns true if `timestampFrom` has been explicitly set.
  public var hasTimestampFrom: Bool {return self._timestampFrom != nil}
  /// Clears the value of `timestampFrom`. Subsequent reads from it will return its default value.
  public mutating func clearTimestampFrom() {self._timestampFrom = nil}

  public var timestampTo: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestampTo ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestampTo = newValue}
  }
  /// Returns true if `timestampTo` has been explicitly set.
  public var hasTimestampTo: Bool {return self._timestampTo != nil}
  /// Clears the value of `timestampTo`. Subsequent reads from it will return its default value.
  public mutating func clearTimestampTo() {self._timestampTo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timestampFrom: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _timestampTo: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Research_GtfsRealtime_V1_ListVehiclePositionsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: Kantacky_Foundation_V1_Result {
    get {return _result ?? Kantacky_Foundation_V1_Result()}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  public var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  public mutating func clearResult() {self._result = nil}

  public var vehiclePositions: [Research_GtfsRealtime_V1_VehiclePosition] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _result: Kantacky_Foundation_V1_Result? = nil
}

public struct Research_GtfsRealtime_V1_VehiclePosition {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ID (UUID)
  public var id: String = String()

  public var tripID: String {
    get {return _tripID ?? String()}
    set {_tripID = newValue}
  }
  /// Returns true if `tripID` has been explicitly set.
  public var hasTripID: Bool {return self._tripID != nil}
  /// Clears the value of `tripID`. Subsequent reads from it will return its default value.
  public mutating func clearTripID() {self._tripID = nil}

  public var routeID: String {
    get {return _routeID ?? String()}
    set {_routeID = newValue}
  }
  /// Returns true if `routeID` has been explicitly set.
  public var hasRouteID: Bool {return self._routeID != nil}
  /// Clears the value of `routeID`. Subsequent reads from it will return its default value.
  public mutating func clearRouteID() {self._routeID = nil}

  public var directionID: Int32 {
    get {return _directionID ?? 0}
    set {_directionID = newValue}
  }
  /// Returns true if `directionID` has been explicitly set.
  public var hasDirectionID: Bool {return self._directionID != nil}
  /// Clears the value of `directionID`. Subsequent reads from it will return its default value.
  public mutating func clearDirectionID() {self._directionID = nil}

  public var startDatetime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startDatetime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startDatetime = newValue}
  }
  /// Returns true if `startDatetime` has been explicitly set.
  public var hasStartDatetime: Bool {return self._startDatetime != nil}
  /// Clears the value of `startDatetime`. Subsequent reads from it will return its default value.
  public mutating func clearStartDatetime() {self._startDatetime = nil}

  public var scheduleRelationship: String {
    get {return _scheduleRelationship ?? String()}
    set {_scheduleRelationship = newValue}
  }
  /// Returns true if `scheduleRelationship` has been explicitly set.
  public var hasScheduleRelationship: Bool {return self._scheduleRelationship != nil}
  /// Clears the value of `scheduleRelationship`. Subsequent reads from it will return its default value.
  public mutating func clearScheduleRelationship() {self._scheduleRelationship = nil}

  public var vehicleID: String {
    get {return _vehicleID ?? String()}
    set {_vehicleID = newValue}
  }
  /// Returns true if `vehicleID` has been explicitly set.
  public var hasVehicleID: Bool {return self._vehicleID != nil}
  /// Clears the value of `vehicleID`. Subsequent reads from it will return its default value.
  public mutating func clearVehicleID() {self._vehicleID = nil}

  public var vehicleLabel: String {
    get {return _vehicleLabel ?? String()}
    set {_vehicleLabel = newValue}
  }
  /// Returns true if `vehicleLabel` has been explicitly set.
  public var hasVehicleLabel: Bool {return self._vehicleLabel != nil}
  /// Clears the value of `vehicleLabel`. Subsequent reads from it will return its default value.
  public mutating func clearVehicleLabel() {self._vehicleLabel = nil}

  public var vehiclePosition: Kantacky_Foundation_V1_Coordinate {
    get {return _vehiclePosition ?? Kantacky_Foundation_V1_Coordinate()}
    set {_vehiclePosition = newValue}
  }
  /// Returns true if `vehiclePosition` has been explicitly set.
  public var hasVehiclePosition: Bool {return self._vehiclePosition != nil}
  /// Clears the value of `vehiclePosition`. Subsequent reads from it will return its default value.
  public mutating func clearVehiclePosition() {self._vehiclePosition = nil}

  public var currentStopSequence: Int32 {
    get {return _currentStopSequence ?? 0}
    set {_currentStopSequence = newValue}
  }
  /// Returns true if `currentStopSequence` has been explicitly set.
  public var hasCurrentStopSequence: Bool {return self._currentStopSequence != nil}
  /// Clears the value of `currentStopSequence`. Subsequent reads from it will return its default value.
  public mutating func clearCurrentStopSequence() {self._currentStopSequence = nil}

  public var stopID: String {
    get {return _stopID ?? String()}
    set {_stopID = newValue}
  }
  /// Returns true if `stopID` has been explicitly set.
  public var hasStopID: Bool {return self._stopID != nil}
  /// Clears the value of `stopID`. Subsequent reads from it will return its default value.
  public mutating func clearStopID() {self._stopID = nil}

  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {self._timestamp = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _tripID: String? = nil
  fileprivate var _routeID: String? = nil
  fileprivate var _directionID: Int32? = nil
  fileprivate var _startDatetime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _scheduleRelationship: String? = nil
  fileprivate var _vehicleID: String? = nil
  fileprivate var _vehicleLabel: String? = nil
  fileprivate var _vehiclePosition: Kantacky_Foundation_V1_Coordinate? = nil
  fileprivate var _currentStopSequence: Int32? = nil
  fileprivate var _stopID: String? = nil
  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Research_GtfsRealtime_V1_ListVehiclesPositionsRequest: @unchecked Sendable {}
extension Research_GtfsRealtime_V1_ListVehiclesPositionsResponse: @unchecked Sendable {}
extension Research_GtfsRealtime_V1_ListVehiclePositionsRequest: @unchecked Sendable {}
extension Research_GtfsRealtime_V1_ListVehiclePositionsResponse: @unchecked Sendable {}
extension Research_GtfsRealtime_V1_VehiclePosition: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "research.gtfs_realtime.v1"

extension Research_GtfsRealtime_V1_ListVehiclesPositionsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListVehiclesPositionsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agency_id"),
    2: .same(proto: "timestamp"),
    3: .standard(proto: "buffer_seconds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.agencyID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.bufferSeconds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.agencyID.isEmpty {
      try visitor.visitSingularStringField(value: self.agencyID, fieldNumber: 1)
    }
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.bufferSeconds != 0 {
      try visitor.visitSingularInt64Field(value: self.bufferSeconds, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Research_GtfsRealtime_V1_ListVehiclesPositionsRequest, rhs: Research_GtfsRealtime_V1_ListVehiclesPositionsRequest) -> Bool {
    if lhs.agencyID != rhs.agencyID {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.bufferSeconds != rhs.bufferSeconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Research_GtfsRealtime_V1_ListVehiclesPositionsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListVehiclesPositionsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "vehicle_positions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._result) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.vehiclePositions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._result {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.vehiclePositions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.vehiclePositions, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Research_GtfsRealtime_V1_ListVehiclesPositionsResponse, rhs: Research_GtfsRealtime_V1_ListVehiclesPositionsResponse) -> Bool {
    if lhs._result != rhs._result {return false}
    if lhs.vehiclePositions != rhs.vehiclePositions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Research_GtfsRealtime_V1_ListVehiclePositionsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListVehiclePositionsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agency_id"),
    2: .standard(proto: "vehicle_id"),
    3: .standard(proto: "timestamp_from"),
    4: .standard(proto: "timestamp_to"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.agencyID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.vehicleID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._timestampFrom) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._timestampTo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.agencyID.isEmpty {
      try visitor.visitSingularStringField(value: self.agencyID, fieldNumber: 1)
    }
    if !self.vehicleID.isEmpty {
      try visitor.visitSingularStringField(value: self.vehicleID, fieldNumber: 2)
    }
    try { if let v = self._timestampFrom {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._timestampTo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Research_GtfsRealtime_V1_ListVehiclePositionsRequest, rhs: Research_GtfsRealtime_V1_ListVehiclePositionsRequest) -> Bool {
    if lhs.agencyID != rhs.agencyID {return false}
    if lhs.vehicleID != rhs.vehicleID {return false}
    if lhs._timestampFrom != rhs._timestampFrom {return false}
    if lhs._timestampTo != rhs._timestampTo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Research_GtfsRealtime_V1_ListVehiclePositionsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListVehiclePositionsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "vehicle_positions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._result) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.vehiclePositions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._result {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.vehiclePositions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.vehiclePositions, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Research_GtfsRealtime_V1_ListVehiclePositionsResponse, rhs: Research_GtfsRealtime_V1_ListVehiclePositionsResponse) -> Bool {
    if lhs._result != rhs._result {return false}
    if lhs.vehiclePositions != rhs.vehiclePositions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Research_GtfsRealtime_V1_VehiclePosition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VehiclePosition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "trip_id"),
    3: .standard(proto: "route_id"),
    4: .standard(proto: "direction_id"),
    5: .standard(proto: "start_datetime"),
    6: .standard(proto: "schedule_relationship"),
    7: .standard(proto: "vehicle_id"),
    8: .standard(proto: "vehicle_label"),
    9: .standard(proto: "vehicle_position"),
    10: .standard(proto: "current_stop_sequence"),
    11: .standard(proto: "stop_id"),
    12: .same(proto: "timestamp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._tripID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._routeID) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self._directionID) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._startDatetime) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._scheduleRelationship) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._vehicleID) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self._vehicleLabel) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._vehiclePosition) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self._currentStopSequence) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self._stopID) }()
      case 12: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._tripID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._routeID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._directionID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._startDatetime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._scheduleRelationship {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._vehicleID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._vehicleLabel {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._vehiclePosition {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._currentStopSequence {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._stopID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Research_GtfsRealtime_V1_VehiclePosition, rhs: Research_GtfsRealtime_V1_VehiclePosition) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._tripID != rhs._tripID {return false}
    if lhs._routeID != rhs._routeID {return false}
    if lhs._directionID != rhs._directionID {return false}
    if lhs._startDatetime != rhs._startDatetime {return false}
    if lhs._scheduleRelationship != rhs._scheduleRelationship {return false}
    if lhs._vehicleID != rhs._vehicleID {return false}
    if lhs._vehicleLabel != rhs._vehicleLabel {return false}
    if lhs._vehiclePosition != rhs._vehiclePosition {return false}
    if lhs._currentStopSequence != rhs._currentStopSequence {return false}
    if lhs._stopID != rhs._stopID {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
